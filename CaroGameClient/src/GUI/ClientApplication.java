/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import CaroGame.Caro;
import CaroGame.CaroGameApp;
import com.sun.glass.events.KeyEvent;
import echoclient.Client;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import java.io.*;
import java.net.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.scene.input.KeyCode;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.WindowConstants;
import javax.swing.text.DefaultCaret;

/**
 *
 * @author thehaohcm
 */
public class ClientApplication extends javax.swing.JFrame {

    /**
     * Creates new form ClientApplication
     */
    
    public String host;
    public int port;
    public String username;
    Thread clientThread;
    Client client;
    DefaultListModel dlm;
    String chatWith="All";
    boolean flag_listuser=false;
    boolean flag_checkuser=false;

    public ClientApplication() {
        this.setTitle("Client Chat Application");
        dlm=new DefaultListModel();
        initComponents();
        DefaultCaret caret = (DefaultCaret)ChatAreatxt.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        userTxt.requestFocus();
        ChatAreatxt.setLineWrap(true);
        refreshBtn.setEnabled(false);
        browseFileBtn.setEnabled(false);
        dlm=new DefaultListModel();
        nickList.setModel(dlm);
        dlm.removeAllElements();
        nickList.removeAll();
        
//        CaroGameApp caro=new CaroGameApp("Thế","Hào");
//         caro.setSize(800, 700);
//        caro.setResizable(false);
//        caro.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
//        caro.setLocationRelativeTo(null);
//        caro.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
//        caro.addWindowListener(new WindowAdapter() {
//            public void windowClosing(WindowEvent ev) {
//                //frame.dispose();
//                caro.close();
//                caro.dispose();
//            }
//        });
//        caro.setVisible(true);
//        caro.setTitle("Game Caro qua mạng Lan - "+caro.getName()+" vs. "+caro.getRival());

        Caro.main(new String[]{"localhost","Thế","Hào"});
        Caro.main(new String[]{"localhost","Hào","Thế"});
    }
    
    public synchronized void getUser(String usrs[]){
        dlm.removeAllElements();
        nickList.removeAll();
        boolean flag=false;
        //int count=0;
        for(String u:usrs){
            if(u.equals("@ListUser"))
                continue;
            if(u.equals(username))
                continue;
            dlm.addElement(u);
            //System.out.println("user: "+u);
            if(chatWith.equals(u))
                flag=true;
        }
        if(flag==false){
            chatWith="All";
            chatWithTxt.setText("All");
        }
        nickList.setEnabled(true);
        chatTxt.setEnabled(true);
        enterBtn.setEnabled(true);
        ChatAreatxt.setEnabled(true);
        refreshBtn.setEnabled(true);
        nickList.setSelectedIndex(0);
        browseFileBtn.setEnabled(false);
        //System.out.println(dlm.getSize()+" "+dlm.getElementAt(0).toString()+" "+dlm.firstElement().toString());
        if(flag_listuser){
            ChatAreatxt.append("Đã cập nhật danh sách Tài khoản\n");
            flag_listuser=false;
        }
    }
    
    public void disConnect(){
        JOptionPane.showMessageDialog(null, "Không thể kết nối với server", "Lỗi", JOptionPane.ERROR_MESSAGE);
        codiscoBtn.doClick();
    }
    
    public void doDiscExistUser(){
        JOptionPane.showMessageDialog(null, "Tên tài khoản trùng với một thành viên khác trong chat room","Trùng tên trong chat room",JOptionPane.ERROR_MESSAGE);
        codiscoBtn.doClick();
    }
    
//    public boolean checkUserExitsBeforeLogin(String user,String usrs[]){
//        for(String u:usrs){
//            if(u.equals("@ListUser"))
//                continue;
//            if(u.equals(user))
//                return true; //có tồn tại 1 nick có tên giống vậy
//        }
//        return false; //không tồn tại nick nào có tên giống vậy
//    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ChatAreatxt = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        ipAddTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        portTxt = new javax.swing.JTextField();
        codiscoBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        nickList = new javax.swing.JList<>();
        chatTxt = new javax.swing.JTextField();
        enterBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        userTxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        chatWithTxt = new javax.swing.JLabel();
        refreshBtn = new javax.swing.JButton();
        browseFileBtn = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        ChatAreatxt.setEditable(false);
        ChatAreatxt.setColumns(20);
        ChatAreatxt.setFont(new java.awt.Font("Monospaced", 0, 16)); // NOI18N
        ChatAreatxt.setRows(5);
        ChatAreatxt.setEnabled(false);
        jScrollPane1.setViewportView(ChatAreatxt);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("IP Address:");

        ipAddTxt.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        ipAddTxt.setText("127.0.0.1");
        ipAddTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ipAddTxtKeyPressed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Port:");

        portTxt.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        portTxt.setText("1995");
        portTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                portTxtKeyPressed(evt);
            }
        });

        codiscoBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        codiscoBtn.setText("Connect");
        codiscoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codiscoBtnActionPerformed(evt);
            }
        });

        nickList.setEnabled(false);
        nickList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nickListMouseClicked(evt);
            }
        });
        nickList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                nickListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(nickList);

        chatTxt.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        chatTxt.setEnabled(false);
        chatTxt.setFocusTraversalPolicyProvider(true);
        chatTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                chatTxtKeyPressed(evt);
            }
        });

        enterBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        enterBtn.setText("Enter");
        enterBtn.setEnabled(false);
        enterBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterBtnActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Username:");

        userTxt.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        userTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                userTxtKeyPressed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Chat with: ");

        chatWithTxt.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        chatWithTxt.setText("All");

        refreshBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        refreshBtn.setText("Refresh List");
        refreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtnActionPerformed(evt);
            }
        });

        browseFileBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        browseFileBtn.setText("Browse...");
        browseFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseFileBtnActionPerformed(evt);
            }
        });

        jMenu4.setText("File");

        jMenuItem1.setText("Setting...");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem1);

        jMenuItem2.setText("Exit");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem2);

        jMenuBar1.add(jMenu4);

        jMenu5.setText("Edit");
        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(chatTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 461, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browseFileBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ipAddTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                            .addComponent(chatWithTxt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(portTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(userTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(codiscoBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                    .addComponent(enterBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(refreshBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(ipAddTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(portTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(codiscoBtn)
                    .addComponent(jLabel3)
                    .addComponent(userTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(chatWithTxt)
                    .addComponent(refreshBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(browseFileBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(enterBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chatTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void codiscoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_codiscoBtnActionPerformed
        // TODO add your handling code here:
        if (codiscoBtn.getText().equals("Connect")) {
            if (ipAddTxt.getText().trim().equals("") || portTxt.getText().trim().equals("") || userTxt.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null, "Xin vui lòng nhập vào đầy đủ thông tin", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
                return;
            }
            if(userTxt.getText().length()>15){
                JOptionPane.showMessageDialog(null, "Tên đăng nhập quá dài, Xin bạn vui lòng chọn tên khác","Lỗi",JOptionPane.ERROR_MESSAGE);
                userTxt.requestFocus();
                userTxt.selectAll();
                return;
            }
            try {
                host = ipAddTxt.getText();
                port = Integer.parseInt(portTxt.getText());
                username = userTxt.getText();
                client=new Client(this);
                clientThread = new Thread(client);
                clientThread.start();
                ipAddTxt.setEnabled(false);
                portTxt.setEnabled(false);
                userTxt.setEnabled(false);
                ChatAreatxt.setEnabled(true);
                chatTxt.setEnabled(true);
                enterBtn.setEnabled(true);
                nickList.setEnabled(true);
                chatWithTxt.setText("All");
                chatWith="All";
                codiscoBtn.setText("Disconnect");
                chatTxt.requestFocus();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Không thể kết nối với server", "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            try {
                client.send("/quit");
                
                client.stop();
                client=null;
                
                ipAddTxt.setEnabled(true);
                portTxt.setEnabled(true);
                userTxt.setEnabled(true);
                ChatAreatxt.setEnabled(false);
                chatTxt.setEnabled(false);
                enterBtn.setEnabled(false);
                nickList.setEnabled(false);
                refreshBtn.setEnabled(false);
                browseFileBtn.setEnabled(false);
                
                codiscoBtn.setText("Connect");
                userTxt.requestFocus();
                userTxt.selectAll();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Không thể ngắt kết nối với Server", "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        }
        flag_listuser=false;
    }//GEN-LAST:event_codiscoBtnActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void enterBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterBtnActionPerformed
        // TODO add your handling code here:
        try {
            String str = chatTxt.getText();
            if(chatTxt.isEnabled()){
                if(str.contains("@ListUser")||str.contains("@To")||str.contains("@sendFile")||str.contains("@sendRequest")||str.equals("@sendUsers")||str.equals("@CheckUser:false")||str.equals("/quit")){
                    JOptionPane.showMessageDialog(null,"Không thể gửi được tin nhắn vì cú pháp. Xin vui lòng xem lại cú pháp" , "Lỗi", JOptionPane.ERROR_MESSAGE);
                }
                else{
                    if(chatWith.equals("All"))
                        client.send(str);
                    else
                        client.send("@To:"+chatWith+":"+str);
                    chatTxt.setText("");
                }
                chatTxt.requestFocus();
            }
            else{ //send file
                client.send("@sendFile:"+chatWith+"|"+chatTxt.getText());
                client.setFilePath(chatTxt.getText());
                browseFileBtn.setText("Browse...");
                
                chatTxt.setEnabled(true);
                chatTxt.setText("");
                chatTxt.requestFocus();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Không thể gửi được tin nhắn", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_enterBtnActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if(client!=null){
            client.send("/quit");
            try {
                client.stop();
            } catch (IOException ex) {
                Logger.getLogger(ClientApplication.class.getName()).log(Level.SEVERE, null, ex);
            }
            client=null;

            if(clientThread.isAlive()){
                System.out.println("Thread vẫn còn sống");
            }else{
                System.out.println("Thread đã chết");
            }
        }
        
    }//GEN-LAST:event_formWindowClosing

    private void chatTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_chatTxtKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            enterBtn.doClick();
        }
    }//GEN-LAST:event_chatTxtKeyPressed

    private void userTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_userTxtKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            codiscoBtn.doClick();
        }
    }//GEN-LAST:event_userTxtKeyPressed

    private void ipAddTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ipAddTxtKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            codiscoBtn.doClick();
        }
    }//GEN-LAST:event_ipAddTxtKeyPressed

    private void portTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_portTxtKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            codiscoBtn.doClick();
        }
    }//GEN-LAST:event_portTxtKeyPressed

    private void nickListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_nickListValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_nickListValueChanged

    private void nickListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nickListMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 1) {
            int index = nickList.locationToIndex(evt.getPoint());
            if (index >= 0) {
                Object o = nickList.getModel().getElementAt(index);
                chatWithTxt.setText(o.toString());
                chatWith = o.toString();
                if(chatWith.equals("All"))
                    browseFileBtn.setEnabled(false);
                else
                    browseFileBtn.setEnabled(true);
            }
        }
    }//GEN-LAST:event_nickListMouseClicked

    private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed
        // TODO add your handling code here:
        client.send("@sendUsers");
        refreshBtn.setEnabled(false);
        flag_listuser=true;
    }//GEN-LAST:event_refreshBtnActionPerformed

    private void browseFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseFileBtnActionPerformed
        // TODO add your handling code here:
       if(browseFileBtn.getText().equals("Browse...")){
            JFileChooser jfc = new JFileChooser();
            int result=jfc.showOpenDialog(this);
            if (result == JFileChooser.APPROVE_OPTION) {
                File selectedFile = jfc.getSelectedFile();
                chatTxt.setText(selectedFile.getAbsolutePath());
                chatTxt.setEnabled(false);
                browseFileBtn.setText("Clear...");
            }
       }
       else{
           chatTxt.setText("");
           browseFileBtn.setText("Browse...");
           chatTxt.requestFocus();
       } 
        
    }//GEN-LAST:event_browseFileBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientApplication().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTextArea ChatAreatxt;
    private javax.swing.JButton browseFileBtn;
    private javax.swing.JTextField chatTxt;
    private javax.swing.JLabel chatWithTxt;
    public javax.swing.JButton codiscoBtn;
    private javax.swing.JButton enterBtn;
    private javax.swing.JTextField ipAddTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JList<String> nickList;
    private javax.swing.JTextField portTxt;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JTextField userTxt;
    // End of variables declaration//GEN-END:variables
}
